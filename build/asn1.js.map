{"version":3,"sources":["../src/asn1.js"],"names":["powers2","Uint8Array","digitsString","LocalBaseBlock","constructor","parameters","blockLength","error","warnings","valueBeforeDecode","slice","ArrayBuffer","blockName","toJSON","byteLength","LocalHexBlock","BaseClass","LocalHexBlockMixin","isHexOnly","valueHex","fromBER","inputBuffer","inputOffset","inputLength","intBuffer","length","push","toBER","sizeOnly","object","ex","LocalIdentificationBlock","idBlock","tagClass","tagNumber","isConstructed","firstOctet","retBuf","retView","number","encodedBuf","encodedView","size","i","curView","tagClassMask","tagNumberMask","count","tagNumberBufferMaxLength","intTagNumberBuffer","tempBuffer","tempBufferView","set","LocalLengthBlock","isIndefiniteForm","lenBlock","longFormUsed","lengthBufferView","LocalValueBlock","TypeError","BaseBlock","valueBlockType","name","optional","primitiveSchema","valueBlock","resultOffset","idBlockBuf","valueBlockSizeBuf","lenBlockBuf","valueBlockBuf","indefBuf","indefView","LocalPrimitiveValueBlock","valueHexView","Primitive","LocalConstructedValueBlock","value","initialOffset","initialLength","checkLen","indefiniteLength","currentOffset","returnObject","LocalFromBER","offset","result","concat","EndOfContent","pop","valueBuf","Constructed","LocalEndOfContentValueBlock","paramaters","LocalBooleanValueBlock","view","utilDecodeTC","call","Boolean","Sequence","Set","Null","LocalOctetStringValueBlock","prototype","currentBlockName","OctetString","isEqual","octetString","JSON","stringify","LocalBitStringValueBlock","unusedBits","BitString","bitString","LocalIntegerValueBlock","valueDec","_value","_valueHex","_valueDec","fromDER","expectedLength","updatedValueHex","updatedView","toDER","toString","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","max","counter","power2","n","p","digits","newValue","viewSub","b","firstBit","bitNumber","currentByte","asn1View","flag","byteNumber","charAt","Integer","otherValue","convertToDER","integer","convertFromDER","Enumerated","LocalSidValueBlock","isFirstSid","tempValueHex","tempView","sidValue","LocalObjectIdentifierValueBlock","fromString","sidBlock","string","pos1","pos2","sid","indexOf","substr","plus","parsedSID","parseInt","isNaN","sidStr","sidArray","ObjectIdentifier","LocalUtf8StringValueBlock","Utf8String","fromBuffer","String","fromCharCode","apply","decodeURIComponent","escape","inputString","str","unescape","encodeURIComponent","strLen","charCodeAt","LocalBmpStringValueBlock","BmpString","copyBuffer","valueView","temp","Uint16Array","strLength","codeBuf","codeView","dif","j","LocalUniversalStringValueBlock","UniversalString","Uint32Array","LocalSimpleStringValueBlock","LocalSimpleStringBlock","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","UTCTime","year","month","day","hour","minute","fromDate","valueDate","toBuffer","buffer","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toDate","Date","UTC","parser","parserArray","exec","outputArray","Array","join","GeneralizedTime","millisecond","getUTCMilliseconds","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","Number","valueOf","Error","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","DATE","TimeOfDay","DateTime","Duration","TIME","Choice","Any","Repeated","local","RawData","data","incomingOffset","localChangeType","inputObject","newType","newObject","Object","newASN1Type","compareSchema","root","inputData","inputSchema","choiceResult","verified","_result","hasOwnProperty","encodedId","decodedOffset","schemaView","replace","admission","maxLength","_optional","arrayRoot","asn1","verifySchema","fromJSON","json"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\n/*\n * Copyright (c) 2016-2018, Peculiar Ventures\n * All rights reserved.\n *\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors\n *    may be used to endorse or promote products derived from this software without\n *    specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n * OF SUCH DAMAGE.\n *\n */\n//**************************************************************************************\nimport { getParametersValue, padNumber, isEqualBuffer, bufferToHexCodes, checkBufferParams, utilToBase, utilFromBase, utilEncodeTC, utilDecodeTC, utilConcatBuf, utilConcatView } from \"pvutils\";\n//**************************************************************************************\n//region Declaration of global variables\n//**************************************************************************************\nconst powers2 = [new Uint8Array([1])];\nconst digitsString = \"0123456789\";\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration for \"LocalBaseBlock\" class\n//**************************************************************************************\n/**\n * Class used as a base block for all remaining ASN.1 classes\n * @typedef LocalBaseBlock\n * @interface\n * @property {number} blockLength\n * @property {string} error\n * @property {Array.<string>} warnings\n * @property {ArrayBuffer} valueBeforeDecode\n */\nclass LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueBeforeDecode]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {number} blockLength\n\t\t */\n\t\tthis.blockLength = getParametersValue(parameters, \"blockLength\", 0);\n\t\t/**\n\t\t * @type {string} error\n\t\t */\n\t\tthis.error = getParametersValue(parameters, \"error\", \"\");\n\t\t/**\n\t\t * @type {Array.<string>} warnings\n\t\t */\n\t\tthis.warnings = getParametersValue(parameters, \"warnings\", []);\n\t\t//noinspection JSCheckFunctionSignatures\n\t\t/**\n\t\t * @type {ArrayBuffer} valueBeforeDecode\n\t\t */\n\t\tif(\"valueBeforeDecode\" in parameters)\n\t\t\tthis.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);\n\t\telse\n\t\t\tthis.valueBeforeDecode = new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"baseBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tblockName: this.constructor.blockName(),\n\t\t\tblockLength: this.blockLength,\n\t\t\terror: this.error,\n\t\t\twarnings: this.warnings,\n\t\t\tvalueBeforeDecode: bufferToHexCodes(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Description for \"LocalHexBlock\" class\n//**************************************************************************************\n/**\n * Class used as a base block for all remaining ASN.1 classes\n * @extends LocalBaseBlock\n * @typedef LocalHexBlock\n * @property {number} blockLength\n * @property {string} error\n * @property {Array.<string>} warnings\n * @property {ArrayBuffer} valueBeforeDecode\n * @property {boolean} isHexOnly\n * @property {ArrayBuffer} valueHex\n */\n//noinspection JSUnusedLocalSymbols\nconst LocalHexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass\n{\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Constructor for \"LocalHexBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tif(\"valueHex\" in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t\tthis.valueHex = new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"hexBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Copy input buffer to internal buffer\n\t\tthis.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);\n\t\t//endregion\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tif(this.isHexOnly !== true)\n\t\t{\n\t\t\tthis.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\n\t\t\treturn new ArrayBuffer(0);\n\t\t}\n\n\t\tif(sizeOnly === true)\n\t\t\treturn new ArrayBuffer(this.valueHex.byteLength);\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n};\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of identification block class\n//**************************************************************************************\nclass LocalIdentificationBlock extends LocalHexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [idBlock]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper();\n\n\t\tif(\"idBlock\" in parameters)\n\t\t{\n\t\t\t//region Properties from hexBlock class\n\t\t\tthis.isHexOnly = getParametersValue(parameters.idBlock, \"isHexOnly\", false);\n\t\t\tthis.valueHex = getParametersValue(parameters.idBlock, \"valueHex\", new ArrayBuffer(0));\n\t\t\t//endregion\n\n\t\t\tthis.tagClass = getParametersValue(parameters.idBlock, \"tagClass\", (-1));\n\t\t\tthis.tagNumber = getParametersValue(parameters.idBlock, \"tagNumber\", (-1));\n\t\t\tthis.isConstructed = getParametersValue(parameters.idBlock, \"isConstructed\", false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.tagClass = (-1);\n\t\t\tthis.tagNumber = (-1);\n\t\t\tthis.isConstructed = false;\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"identificationBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Initial variables\n\t\tlet firstOctet = 0;\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tswitch(this.tagClass)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tfirstOctet |= 0x00; // UNIVERSAL\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tfirstOctet |= 0x40; // APPLICATION\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tfirstOctet |= 0x80; // CONTEXT-SPECIFIC\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tfirstOctet |= 0xC0; // PRIVATE\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.error = \"Unknown tag class\";\n\t\t\t\treturn (new ArrayBuffer(0));\n\t\t}\n\n\t\tif(this.isConstructed)\n\t\t\tfirstOctet |= 0x20;\n\n\t\tif((this.tagNumber < 31) && (!this.isHexOnly))\n\t\t{\n\t\t\tretBuf = new ArrayBuffer(1);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tif(!sizeOnly)\n\t\t\t{\n\t\t\t\tlet number = this.tagNumber;\n\t\t\t\tnumber &= 0x1F;\n\t\t\t\tfirstOctet |= number;\n\n\t\t\t\tretView[0] = firstOctet;\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tif(this.isHexOnly === false)\n\t\t{\n\t\t\tconst encodedBuf = utilToBase(this.tagNumber, 7);\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tconst size = encodedBuf.byteLength;\n\n\t\t\tretBuf = new ArrayBuffer(size + 1);\n\t\t\tretView = new Uint8Array(retBuf);\n\t\t\tretView[0] = (firstOctet | 0x1F);\n\n\t\t\tif(!sizeOnly)\n\t\t\t{\n\t\t\t\tfor(let i = 0; i < (size - 1); i++)\n\t\t\t\t\tretView[i + 1] = encodedView[i] | 0x80;\n\n\t\t\t\tretView[size] = encodedView[size - 1];\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n\t\tretView = new Uint8Array(retBuf);\n\n\t\tretView[0] = (firstOctet | 0x1F);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tfor(let i = 0; i < (curView.length - 1); i++)\n\t\t\t\tretView[i + 1] = curView[i] | 0x80;\n\n\t\t\tretView[this.valueHex.byteLength] = curView[curView.length - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.error = \"Zero buffer length\";\n\t\t\treturn (-1);\n\t\t}\n\t\t//endregion\n\n\t\t//region Find tag class\n\t\tconst tagClassMask = intBuffer[0] & 0xC0;\n\n\t\tswitch(tagClassMask)\n\t\t{\n\t\t\tcase 0x00:\n\t\t\t\tthis.tagClass = (1); // UNIVERSAL\n\t\t\t\tbreak;\n\t\t\tcase 0x40:\n\t\t\t\tthis.tagClass = (2); // APPLICATION\n\t\t\t\tbreak;\n\t\t\tcase 0x80:\n\t\t\t\tthis.tagClass = (3); // CONTEXT-SPECIFIC\n\t\t\t\tbreak;\n\t\t\tcase 0xC0:\n\t\t\t\tthis.tagClass = (4); // PRIVATE\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.error = \"Unknown tag class\";\n\t\t\t\treturn (-1);\n\t\t}\n\t\t//endregion\n\n\t\t//region Find it's constructed or not\n\t\tthis.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n\t\t//endregion\n\n\t\t//region Find tag number\n\t\tthis.isHexOnly = false;\n\n\t\tconst tagNumberMask = intBuffer[0] & 0x1F;\n\n\t\t//region Simple case (tag number < 31)\n\t\tif(tagNumberMask !== 0x1F)\n\t\t{\n\t\t\tthis.tagNumber = (tagNumberMask);\n\t\t\tthis.blockLength = 1;\n\t\t}\n\t\t//endregion\n\t\t//region Tag number bigger or equal to 31\n\t\telse\n\t\t{\n\t\t\tlet count = 1;\n\n\t\t\tthis.valueHex = new ArrayBuffer(255);\n\t\t\tlet tagNumberBufferMaxLength = 255;\n\t\t\tlet intTagNumberBuffer = new Uint8Array(this.valueHex);\n\n\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\twhile(intBuffer[count] & 0x80)\n\t\t\t{\n\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n\t\t\t\tcount++;\n\n\t\t\t\tif(count >= intBuffer.length)\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\t//region In case if tag number length is greater than 255 bytes (rare but possible case)\n\t\t\t\tif(count === tagNumberBufferMaxLength)\n\t\t\t\t{\n\t\t\t\t\ttagNumberBufferMaxLength += 255;\n\n\t\t\t\t\tconst tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\n\t\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\n\n\t\t\t\t\tfor(let i = 0; i < intTagNumberBuffer.length; i++)\n\t\t\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\n\n\t\t\t\t\tthis.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\n\t\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\n\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t}\n\n\t\t\tthis.blockLength = (count + 1);\n\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\n\n\t\t\t//region Cut buffer\n\t\t\tconst tempBuffer = new ArrayBuffer(count);\n\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\n\n\t\t\tfor(let i = 0; i < count; i++)\n\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\n\n\t\t\tthis.valueHex = new ArrayBuffer(count);\n\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\n\t\t\tintTagNumberBuffer.set(tempBufferView);\n\t\t\t//endregion\n\n\t\t\t//region Try to convert long tag number to short form\n\t\t\tif(this.blockLength <= 9)\n\t\t\t\tthis.tagNumber = utilFromBase(intTagNumberBuffer, 7);\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.isHexOnly = true;\n\t\t\t\tthis.warnings.push(\"Tag too long, represented as hex-coded\");\n\t\t\t}\n\t\t\t//endregion\n\t\t}\n\t\t//endregion\n\t\t//endregion\n\n\t\t//region Check if constructed encoding was using for primitive type\n\t\tif(((this.tagClass === 1)) &&\n\t\t\t(this.isConstructed))\n\t\t{\n\t\t\tswitch(this.tagNumber)\n\t\t\t{\n\t\t\t\tcase 1:  // Boolean\n\t\t\t\tcase 2:  // REAL\n\t\t\t\tcase 5:  // Null\n\t\t\t\tcase 6:  // OBJECT IDENTIFIER\n\t\t\t\tcase 9:  // REAL\n\t\t\t\tcase 14: // Time\n\t\t\t\tcase 23:\n\t\t\t\tcase 24:\n\t\t\t\tcase 31:\n\t\t\t\tcase 32:\n\t\t\t\tcase 33:\n\t\t\t\tcase 34:\n\t\t\t\t\tthis.error = \"Constructed encoding used for primitive type\";\n\t\t\t\t\treturn (-1);\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName: string,\n\t *  tagClass: number,\n\t *  tagNumber: number,\n\t *  isConstructed: boolean,\n\t *  isHexOnly: boolean,\n\t *  valueHex: ArrayBuffer,\n\t *  blockLength: number,\n\t *  error: string, warnings: Array.<string>,\n\t *  valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.tagClass = this.tagClass;\n\t\tobject.tagNumber = this.tagNumber;\n\t\tobject.isConstructed = this.isConstructed;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of length block class\n//**************************************************************************************\nclass LocalLengthBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalLengthBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [lenBlock]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper();\n\n\t\tif(\"lenBlock\" in parameters)\n\t\t{\n\t\t\tthis.isIndefiniteForm = getParametersValue(parameters.lenBlock, \"isIndefiniteForm\", false);\n\t\t\tthis.longFormUsed = getParametersValue(parameters.lenBlock, \"longFormUsed\", false);\n\t\t\tthis.length = getParametersValue(parameters.lenBlock, \"length\", 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isIndefiniteForm = false;\n\t\t\tthis.longFormUsed = false;\n\t\t\tthis.length = 0;\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"lengthBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.error = \"Zero buffer length\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif(intBuffer[0] === 0xFF)\n\t\t{\n\t\t\tthis.error = \"Length block 0xFF is reserved by standard\";\n\t\t\treturn (-1);\n\t\t}\n\t\t//endregion\n\n\t\t//region Check for length form type\n\t\tthis.isIndefiniteForm = intBuffer[0] === 0x80;\n\t\t//endregion\n\n\t\t//region Stop working in case of indefinite length form\n\t\tif(this.isIndefiniteForm === true)\n\t\t{\n\t\t\tthis.blockLength = 1;\n\t\t\treturn (inputOffset + this.blockLength);\n\t\t}\n\t\t//endregion\n\n\t\t//region Check is long form of length encoding using\n\t\tthis.longFormUsed = !!(intBuffer[0] & 0x80);\n\t\t//endregion\n\n\t\t//region Stop working in case of short form of length value\n\t\tif(this.longFormUsed === false)\n\t\t{\n\t\t\tthis.length = (intBuffer[0]);\n\t\t\tthis.blockLength = 1;\n\t\t\treturn (inputOffset + this.blockLength);\n\t\t}\n\t\t//endregion\n\n\t\t//region Calculate length value in case of long form\n\t\tconst count = intBuffer[0] & 0x7F;\n\n\t\tif(count > 8) // Too big length value\n\t\t{\n\t\t\tthis.error = \"Too big integer\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif((count + 1) > intBuffer.length)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tconst lengthBufferView = new Uint8Array(count);\n\n\t\tfor(let i = 0; i < count; i++)\n\t\t\tlengthBufferView[i] = intBuffer[i + 1];\n\n\t\tif(lengthBufferView[count - 1] === 0x00)\n\t\t\tthis.warnings.push(\"Needlessly long encoded length\");\n\n\t\tthis.length = utilFromBase(lengthBufferView, 8);\n\n\t\tif(this.longFormUsed && (this.length <= 127))\n\t\t\tthis.warnings.push(\"Unneccesary usage of long length form\");\n\n\t\tthis.blockLength = count + 1;\n\t\t//endregion\n\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tif(this.length > 127)\n\t\t\tthis.longFormUsed = true;\n\n\t\tif(this.isIndefiniteForm)\n\t\t{\n\t\t\tretBuf = new ArrayBuffer(1);\n\n\t\t\tif(sizeOnly === false)\n\t\t\t{\n\t\t\t\tretView = new Uint8Array(retBuf);\n\t\t\t\tretView[0] = 0x80;\n\t\t\t}\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tif(this.longFormUsed === true)\n\t\t{\n\t\t\tconst encodedBuf = utilToBase(this.length, 8);\n\n\t\t\tif(encodedBuf.byteLength > 127)\n\t\t\t{\n\t\t\t\tthis.error = \"Too big length\";\n\t\t\t\treturn (new ArrayBuffer(0));\n\t\t\t}\n\n\t\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n\n\t\t\tif(sizeOnly === true)\n\t\t\t\treturn retBuf;\n\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tretView[0] = encodedBuf.byteLength | 0x80;\n\n\t\t\tfor(let i = 0; i < encodedBuf.byteLength; i++)\n\t\t\t\tretView[i + 1] = encodedView[i];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(1);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tretView[0] = this.length;\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.blockName = this.constructor.blockName();\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\n\t\tobject.longFormUsed = this.longFormUsed;\n\t\tobject.length = this.length;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of value block class\n//**************************************************************************************\nclass LocalValueBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"valueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic ASN.1 block class\n//**************************************************************************************\nexport class BaseBlock extends LocalBaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BaseBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Object} [primitiveSchema]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t * @param valueBlockType Type of value block\n\t */\n\tconstructor(parameters = {}, valueBlockType = LocalValueBlock)\n\t{\n\t\tsuper(parameters);\n\n\t\tif(\"name\" in parameters)\n\t\t\tthis.name = parameters.name;\n\t\tif(\"optional\" in parameters)\n\t\t\tthis.optional = parameters.optional;\n\t\tif(\"primitiveSchema\" in parameters)\n\t\t\tthis.primitiveSchema = parameters.primitiveSchema;\n\n\t\tthis.idBlock = new LocalIdentificationBlock(parameters);\n\t\tthis.lenBlock = new LocalLengthBlock(parameters);\n\t\tthis.valueBlock = new valueBlockType(parameters);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BaseBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tlet retBuf;\n\n\t\tconst idBlockBuf = this.idBlock.toBER(sizeOnly);\n\t\tconst valueBlockSizeBuf = this.valueBlock.toBER(true);\n\n\t\tthis.lenBlock.length = valueBlockSizeBuf.byteLength;\n\t\tconst lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n\n\t\tretBuf = utilConcatBuf(idBlockBuf, lenBlockBuf);\n\n\t\tlet valueBlockBuf;\n\n\t\tif(sizeOnly === false)\n\t\t\tvalueBlockBuf = this.valueBlock.toBER(sizeOnly);\n\t\telse\n\t\t\tvalueBlockBuf = new ArrayBuffer(this.lenBlock.length);\n\n\t\tretBuf = utilConcatBuf(retBuf, valueBlockBuf);\n\n\t\tif(this.lenBlock.isIndefiniteForm === true)\n\t\t{\n\t\t\tconst indefBuf = new ArrayBuffer(2);\n\n\t\t\tif(sizeOnly === false)\n\t\t\t{\n\t\t\t\tconst indefView = new Uint8Array(indefBuf);\n\n\t\t\t\tindefView[0] = 0x00;\n\t\t\t\tindefView[1] = 0x00;\n\t\t\t}\n\n\t\t\tretBuf = utilConcatBuf(retBuf, indefBuf);\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.idBlock = this.idBlock.toJSON();\n\t\tobject.lenBlock = this.lenBlock.toJSON();\n\t\tobject.valueBlock = this.valueBlock.toJSON();\n\n\t\tif(\"name\" in this)\n\t\t\tobject.name = this.name;\n\t\tif(\"optional\" in this)\n\t\t\tobject.optional = this.optional;\n\t\tif(\"primitiveSchema\" in this)\n\t\t\tobject.primitiveSchema = this.primitiveSchema.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic block for all PRIMITIVE types\n//**************************************************************************************\nclass LocalPrimitiveValueBlock extends LocalValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalPrimitiveValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueBeforeDecode]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\t//region Variables from \"hexBlock\" class\n\t\tif(\"valueHex\" in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t\tthis.valueHex = new ArrayBuffer(0);\n\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", true);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Copy input buffer into internal buffer\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\n\t\tconst valueHexView = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < intBuffer.length; i++)\n\t\t\tvalueHexView[i] = intBuffer[i];\n\t\t//endregion\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PrimitiveValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\t\tobject.isHexOnly = this.isHexOnly;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Primitive extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Primitive\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalPrimitiveValueBlock);\n\n\t\tthis.idBlock.isConstructed = false;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PRIMITIVE\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of basic block for all CONSTRUCTED types\n//**************************************************************************************\nclass LocalConstructedValueBlock extends LocalValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalConstructedValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\n\t\tthis.isIndefiniteForm = getParametersValue(parameters, \"isIndefiniteForm\", false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Store initial offset and length\n\t\tconst initialOffset = inputOffset;\n\t\tconst initialLength = inputLength;\n\t\t//endregion\n\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\t//region Initial checks\n\t\tif(intBuffer.length === 0)\n\t\t{\n\t\t\tthis.warnings.push(\"Zero buffer length\");\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\t//region Aux function\n\t\tfunction checkLen(indefiniteLength, length)\n\t\t{\n\t\t\tif(indefiniteLength === true)\n\t\t\t\treturn 1;\n\n\t\t\treturn length;\n\t\t}\n\t\t//endregion\n\n\t\tlet currentOffset = inputOffset;\n\n\t\twhile(checkLen(this.isIndefiniteForm, inputLength) > 0)\n\t\t{\n\t\t\tconst returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\n\t\t\tif(returnObject.offset === (-1))\n\t\t\t{\n\t\t\t\tthis.error = returnObject.result.error;\n\t\t\t\tthis.warnings.concat(returnObject.result.warnings);\n\t\t\t\treturn (-1);\n\t\t\t}\n\n\t\t\tcurrentOffset = returnObject.offset;\n\n\t\t\tthis.blockLength += returnObject.result.blockLength;\n\t\t\tinputLength -= returnObject.result.blockLength;\n\n\t\t\tthis.value.push(returnObject.result);\n\n\t\t\tif((this.isIndefiniteForm === true) && (returnObject.result.constructor.blockName() === EndOfContent.blockName()))\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif(this.isIndefiniteForm === true)\n\t\t{\n\t\t\tif(this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName())\n\t\t\t\tthis.value.pop();\n\t\t\telse\n\t\t\t\tthis.warnings.push(\"No EndOfContent block encoded\");\n\t\t}\n\n\t\t//region Copy \"inputBuffer\" to \"valueBeforeDecode\"\n\t\tthis.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);\n\t\t//endregion\n\n\t\treturn currentOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tlet retBuf = new ArrayBuffer(0);\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ConstructedValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\n\t\tobject.value = [];\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\tobject.value.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Constructed extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Constructed\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalConstructedValueBlock);\n\n\t\tthis.idBlock.isConstructed = true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"CONSTRUCTED\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 EndOfContent type class\n//**************************************************************************************\nclass LocalEndOfContentValueBlock extends LocalValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalEndOfContentValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number}\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region There is no \"value block\" for EndOfContent type and we need to return the same offset\n\t\treturn inputOffset;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn new ArrayBuffer(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"EndOfContentValueBlock\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class EndOfContent extends BaseBlock\n{\n\t//**********************************************************************************\n\tconstructor(paramaters = {})\n\t{\n\t\tsuper(paramaters, LocalEndOfContentValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 0; // EndOfContent\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"EndOfContent\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Boolean type class\n//**************************************************************************************\nclass LocalBooleanValueBlock extends LocalValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBooleanValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\t\t\n\t\tthis.value = getParametersValue(parameters, \"value\", false);\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\n\t\t\n\t\tif(\"valueHex\" in parameters)\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\n\t\telse\n\t\t{\n\t\t\tthis.valueHex = new ArrayBuffer(1);\n\t\t\tif(this.value === true)\n\t\t\t{\n\t\t\t\tconst view = new Uint8Array(this.valueHex);\n\t\t\t\tview[0] = 0xFF;\n\t\t\t}\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\t//region Getting Uint8Array from ArrayBuffer\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t\t//endregion\n\n\t\tif(inputLength > 1)\n\t\t\tthis.warnings.push(\"Boolean value encoded in more then 1 octet\");\n\n\t\tthis.isHexOnly = true;\n\n\t\t//region Copy input buffer to internal array\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\n\t\tconst view = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < intBuffer.length; i++)\n\t\t\tview[i] = intBuffer[i];\n\t\t//endregion\n\t\t\n\t\tif(utilDecodeTC.call(this) !== 0 )\n\t\t\tthis.value = true;\n\t\telse\n\t\t\tthis.value = false;\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.valueHex;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BooleanValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Boolean extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Boolean\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBooleanValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 1; // Boolean\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Boolean\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Sequence and Set type classes\n//**************************************************************************************\nexport class Sequence extends Constructed\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Sequence\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 16; // Sequence\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Sequence\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Set extends Constructed\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Set\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 17; // Set\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Set\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Null type class\n//**************************************************************************************\nexport class Null extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Null\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified \"fromBER\" and \"toBER\" functions\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 5; // Null\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Null\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tif(this.lenBlock.length > 0)\n\t\t\tthis.warnings.push(\"Non-zero length of value block for Null type\");\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\t\t\n\t\tthis.blockLength += inputLength;\n\t\t\n\t\tif((inputOffset + inputLength) > inputBuffer.byteLength)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n\t\t\treturn (-1);\n\t\t}\n\t\t\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tconst retBuf = new ArrayBuffer(2);\n\n\t\tif(sizeOnly === true)\n\t\t\treturn retBuf;\n\n\t\tconst retView = new Uint8Array(retBuf);\n\t\tretView[0] = 0x05;\n\t\tretView[1] = 0x00;\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 OctetString type class\n//**************************************************************************************\nclass LocalOctetStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalOctetStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tlet resultOffset = 0;\n\n\t\tif(this.isConstructed === true)\n\t\t{\n\t\t\tthis.isHexOnly = false;\n\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t\treturn resultOffset;\n\n\t\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\t{\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\n\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\n\t\t\t\t{\n\t\t\t\t\tif(this.isIndefiniteForm === true)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n\t\t\t\t\t\treturn (-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(currentBlockName !== OctetString.blockName())\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = true;\n\n\t\t\tresultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n\t\t\tthis.blockLength = inputLength;\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tif(this.isConstructed === true)\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\n\n\t\tlet retBuf = new ArrayBuffer(this.valueHex.byteLength);\n\n\t\tif(sizeOnly === true)\n\t\t\treturn retBuf;\n\n\t\tif(this.valueHex.byteLength === 0)\n\t\t\treturn retBuf;\n\n\t\tretBuf = this.valueHex.slice(0);\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"OctetStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.isConstructed = this.isConstructed;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class OctetString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"OctetString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalOctetStringValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 4; // OctetString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\t//region Ability to encode empty OCTET STRING\n\t\tif(inputLength === 0)\n\t\t{\n\t\t\tif(this.idBlock.error.length === 0)\n\t\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\t\tif(this.lenBlock.error.length === 0)\n\t\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\t\treturn inputOffset;\n\t\t}\n\t\t//endregion\n\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"OctetString\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Checking that two OCTETSTRINGs are equal\n\t * @param {OctetString} octetString\n\t */\n\tisEqual(octetString)\n\t{\n\t\t//region Check input type\n\t\tif((octetString instanceof OctetString) === false)\n\t\t\treturn false;\n\t\t//endregion\n\n\t\t//region Compare two JSON strings\n\t\tif(JSON.stringify(this) !== JSON.stringify(octetString))\n\t\t\treturn false;\n\t\t//endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 BitString type class\n//**************************************************************************************\nclass LocalBitStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBitStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.unusedBits = getParametersValue(parameters, \"unusedBits\", 0);\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\n\t\tthis.blockLength = this.valueHex.byteLength;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Ability to decode zero-length BitString value\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\t\t//endregion\n\n\t\tlet resultOffset = (-1);\n\n\t\t//region If the BISTRING supposed to be a constructed value\n\t\tif(this.isConstructed === true)\n\t\t{\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t\treturn resultOffset;\n\n\t\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\t{\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\n\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\n\t\t\t\t{\n\t\t\t\t\tif(this.isIndefiniteForm === true)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n\t\t\t\t\t\treturn (-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(currentBlockName !== BitString.blockName())\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"BIT STRING may consists of BIT STRINGs only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\tif((this.unusedBits > 0) && (this.value[i].valueBlock.unusedBits > 0))\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"Usign of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\n\t\t\t\tthis.unusedBits = this.value[i].valueBlock.unusedBits;\n\t\t\t\tif(this.unusedBits > 7)\n\t\t\t\t{\n\t\t\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\n\t\t\t\t\treturn (-1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn resultOffset;\n\t\t}\n\t\t//endregion\n\t\t//region If the BitString supposed to be a primitive value\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.unusedBits = intBuffer[0];\n\t\t\n\t\tif(this.unusedBits > 7)\n\t\t{\n\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\t//region Copy input buffer to internal buffer\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length - 1);\n\t\tconst view = new Uint8Array(this.valueHex);\n\t\tfor(let i = 0; i < (inputLength - 1); i++)\n\t\t\tview[i] = intBuffer[i + 1];\n\t\t//endregion\n\n\t\tthis.blockLength = intBuffer.length;\n\n\t\treturn (inputOffset + inputLength);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tif(this.isConstructed === true)\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\n\n\t\tif(sizeOnly === true)\n\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength + 1));\n\n\t\tif(this.valueHex.byteLength === 0)\n\t\t\treturn (new ArrayBuffer(0));\n\n\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\tconst retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\n\t\tconst retView = new Uint8Array(retBuf);\n\n\t\tretView[0] = this.unusedBits;\n\n\t\tfor(let i = 0; i < this.valueHex.byteLength; i++)\n\t\t\tretView[i + 1] = curView[i];\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BitStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.unusedBits = this.unusedBits;\n\t\tobject.isConstructed = this.isConstructed;\n\t\tobject.isHexOnly = this.isHexOnly;\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class BitString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BitString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBitStringValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 3; // BitString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BitString\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\t//region Ability to encode empty BitString\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\t\t//endregion\n\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Checking that two BITSTRINGs are equal\n\t * @param {BitString} bitString\n\t */\n\tisEqual(bitString)\n\t{\n\t\t//region Check input type\n\t\tif((bitString instanceof BitString) === false)\n\t\t\treturn false;\n\t\t//endregion\n\n\t\t//region Compare two JSON strings\n\t\tif(JSON.stringify(this) !== JSON.stringify(bitString))\n\t\t\treturn false;\n\t\t//endregion\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Integer type class\n//**************************************************************************************\n/**\n * @extends LocalValueBlock\n */\nclass LocalIntegerValueBlock extends LocalHexBlock(LocalValueBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalIntegerValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.valueDec = parameters.value;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Setter for \"valueHex\"\n\t * @param {ArrayBuffer} _value\n\t */\n\tset valueHex(_value)\n\t{\n\t\tthis._valueHex = _value.slice(0);\n\n\t\tif(_value.byteLength >= 4)\n\t\t{\n\t\t\tthis.warnings.push(\"Too big Integer for decoding, hex only\");\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis._valueDec = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = false;\n\n\t\t\tif(_value.byteLength > 0)\n\t\t\t\tthis._valueDec = utilDecodeTC.call(this);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for \"valueHex\"\n\t * @returns {ArrayBuffer}\n\t */\n\tget valueHex()\n\t{\n\t\treturn this._valueHex;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for \"valueDec\"\n\t * @param {number} _value\n\t */\n\tset valueDec(_value)\n\t{\n\t\tthis._valueDec = _value;\n\n\t\tthis.isHexOnly = false;\n\t\tthis._valueHex = utilEncodeTC(_value);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Getter for \"valueDec\"\n\t * @returns {number}\n\t */\n\tget valueDec()\n\t{\n\t\treturn this._valueDec;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from DER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @param {number} [expectedLength=0] Expected length of converted \"valueHex\" buffer\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0)\n\t{\n\t\tconst offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n\t\tif(offset === (-1))\n\t\t\treturn offset;\n\n\t\tconst view = new Uint8Array(this._valueHex);\n\n\t\tif((view[0] === 0x00) && ((view[1] & 0x80) !== 0))\n\t\t{\n\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n\n\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(expectedLength !== 0)\n\t\t\t{\n\t\t\t\tif(this._valueHex.byteLength < expectedLength)\n\t\t\t\t{\n\t\t\t\t\tif((expectedLength - this._valueHex.byteLength) > 1)\n\t\t\t\t\t\texpectedLength = this._valueHex.byteLength + 1;\n\t\t\t\t\t\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(expectedLength);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView.set(view, expectedLength - this._valueHex.byteLength);\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn offset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoDER(sizeOnly = false)\n\t{\n\t\tconst view = new Uint8Array(this._valueHex);\n\n\t\tswitch(true)\n\t\t{\n\t\t\tcase ((view[0] & 0x80) !== 0):\n\t\t\t\t{\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView[0] = 0x00;\n\t\t\t\t\tupdatedView.set(view, 1);\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\n\t\t\t\t{\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\n\n\t\t\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\n\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\treturn this.toBER(sizeOnly);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n\t\tif(resultOffset === (-1))\n\t\t\treturn resultOffset;\n\n\t\tthis.blockLength = inputLength;\n\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\treturn this.valueHex.slice(0);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"IntegerValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.valueDec = this.valueDec;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current value to decimal string representation\n\t */\n\ttoString()\n\t{\n\t\t//region Aux functions\n\t\tfunction viewAdd(first, second)\n\t\t{\n\t\t\t//region Initial variables\n\t\t\tconst c = new Uint8Array([0]);\n\t\t\t\n\t\t\tlet firstView = new Uint8Array(first);\n\t\t\tlet secondView = new Uint8Array(second);\n\t\t\t\n\t\t\tlet firstViewCopy = firstView.slice(0);\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\n\t\t\tlet secondViewCopy = secondView.slice(0);\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\n\t\t\t\n\t\t\tlet value = 0;\n\t\t\t\n\t\t\tconst max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\n\t\t\t\n\t\t\tlet counter = 0;\n\t\t\t//endregion\n\t\t\t\n\t\t\tfor(let i = max; i >= 0; i--, counter++)\n\t\t\t{\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (counter < secondViewCopy.length):\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + c[0];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tc[0] = value / 10;\n\t\t\t\t\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (counter >= firstViewCopy.length):\n\t\t\t\t\t\tfirstViewCopy = utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value % 10;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(c[0] > 0)\n\t\t\t\tfirstViewCopy = utilConcatView(c, firstViewCopy);\n\t\t\t\n\t\t\treturn firstViewCopy.slice(0);\n\t\t}\n\t\t\n\t\tfunction power2(n)\n\t\t{\n\t\t\tif(n >= powers2.length)\n\t\t\t{\n\t\t\t\tfor(let p = powers2.length; p <= n; p++)\n\t\t\t\t{\n\t\t\t\t\tconst c = new Uint8Array([0]);\n\t\t\t\t\tlet digits = (powers2[p - 1]).slice(0);\n\t\t\t\t\t\n\t\t\t\t\tfor(let i = (digits.length - 1); i >=0; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\n\t\t\t\t\t\tc[0] = newValue[0] / 10;\n\t\t\t\t\t\tdigits[i] = newValue[0] % 10;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (c[0] > 0)\n\t\t\t\t\t\tdigits = utilConcatView(c, digits);\n\t\t\t\t\t\n\t\t\t\t\tpowers2.push(digits);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn powers2[n];\n\t\t}\n\t\t\n\t\tfunction viewSub(first, second)\n\t\t{\n\t\t\t//region Initial variables\n\t\t\tlet b = 0;\n\t\t\t\n\t\t\tlet firstView = new Uint8Array(first);\n\t\t\tlet secondView = new Uint8Array(second);\n\t\t\t\n\t\t\tlet firstViewCopy = firstView.slice(0);\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\n\t\t\tlet secondViewCopy = secondView.slice(0);\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\n\t\t\t\n\t\t\tlet value;\n\t\t\t\n\t\t\tlet counter = 0;\n\t\t\t//endregion\n\t\t\t\n\t\t\tfor(let i = secondViewCopyLength; i >= 0; i--, counter++)\n\t\t\t{\n\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n\t\t\t\t\n\t\t\t\tswitch(true)\n\t\t\t\t{\n\t\t\t\t\tcase (value < 0):\n\t\t\t\t\t\tb = 1;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(b > 0)\n\t\t\t{\n\t\t\t\tfor(let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++)\n\t\t\t\t{\n\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - b;\n\t\t\t\t\t\n\t\t\t\t\tif(value < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tb = 1;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn firstViewCopy.slice();\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Initial variables\n\t\tconst firstBit = (this._valueHex.byteLength * 8) - 1;\n\t\t\n\t\tlet digits = new Uint8Array((this._valueHex.byteLength * 8) / 3);\n\t\tlet bitNumber = 0;\n\t\tlet currentByte;\n\t\t\n\t\tconst asn1View = new Uint8Array(this._valueHex);\n\t\t\n\t\tlet result = \"\";\n\t\t\n\t\tlet flag = false;\n\t\t//endregion\n\t\t\n\t\t//region Calculate number\n\t\tfor(let byteNumber = (this._valueHex.byteLength - 1); byteNumber >= 0; byteNumber--)\n\t\t{\n\t\t\tcurrentByte = asn1View[byteNumber];\n\t\t\t\n\t\t\tfor(let i = 0; i < 8; i++)\n\t\t\t{\n\t\t\t\tif((currentByte & 1) === 1)\n\t\t\t\t{\n\t\t\t\t\tswitch(bitNumber)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase firstBit:\n\t\t\t\t\t\t\tdigits = viewSub(power2(bitNumber), digits);\n\t\t\t\t\t\t\tresult = \"-\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdigits = viewAdd(digits, power2(bitNumber));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbitNumber++;\n\t\t\t\tcurrentByte >>= 1;\n\t\t\t}\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Print number\n\t\tfor(let i = 0; i < digits.length; i++)\n\t\t{\n\t\t\tif(digits[i])\n\t\t\t\tflag = true;\n\t\t\t\n\t\t\tif(flag)\n\t\t\t\tresult += digitsString.charAt(digits[i]);\n\t\t}\n\t\t\n\t\tif(flag === false)\n\t\t\tresult += digitsString.charAt(0);\n\t\t//endregion\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nexport class Integer extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Integer\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalIntegerValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 2; // Integer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Integer\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Compare two Integer object, or Integer and ArrayBuffer objects\n\t * @param {!Integer|ArrayBuffer} otherValue\n\t * @returns {boolean}\n\t */\n\tisEqual(otherValue)\n\t{\n\t\tif(otherValue instanceof Integer)\n\t\t{\n\t\t\tif(this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\n\t\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\n\n\t\t\tif(this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly)\n\t\t\t\treturn (this.valueBlock.valueDec === otherValue.valueBlock.valueDec);\n\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(otherValue instanceof ArrayBuffer)\n\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue);\n\n\t\treturn false;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current Integer value from BER into DER format\n\t * @returns {Integer}\n\t */\n\tconvertToDER()\n\t{\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\n\t\tinteger.valueBlock.toDER();\n\n\t\treturn integer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current Integer value from DER to BER format\n\t * @returns {Integer}\n\t */\n\tconvertFromDER()\n\t{\n\t\tconst expectedLength = (this.valueBlock.valueHex.byteLength % 2) ? (this.valueBlock.valueHex.byteLength + 1) : this.valueBlock.valueHex.byteLength;\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\n\t\tinteger.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\n\t\t\n\t\treturn integer;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 Enumerated type class\n//**************************************************************************************\nexport class Enumerated extends Integer\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Enumerated\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 10; // Enumerated\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Enumerated\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of ASN.1 ObjectIdentifier type class\n//**************************************************************************************\nclass LocalSidValueBlock extends LocalHexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSidValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {number} [valueDec]\n\t * @property {boolean} [isFirstSid]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.valueDec = getParametersValue(parameters, \"valueDec\", -1);\n\t\tthis.isFirstSid = getParametersValue(parameters, \"isFirstSid\", false);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"sidBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tif(inputLength === 0)\n\t\t\treturn inputOffset;\n\n\t\t//region Basic check for parameters\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\n\t\t\treturn (-1);\n\t\t//endregion\n\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\n\t\tlet view = new Uint8Array(this.valueHex);\n\n\t\tfor(let i = 0; i < inputLength; i++)\n\t\t{\n\t\t\tview[i] = intBuffer[i] & 0x7F;\n\n\t\t\tthis.blockLength++;\n\n\t\t\tif((intBuffer[i] & 0x80) === 0x00)\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//region Ajust size of valueHex buffer\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\n\t\tconst tempView = new Uint8Array(tempValueHex);\n\n\t\tfor(let i = 0; i < this.blockLength; i++)\n\t\t\ttempView[i] = view[i];\n\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tthis.valueHex = tempValueHex.slice(0);\n\t\tview = new Uint8Array(this.valueHex);\n\t\t//endregion\n\n\t\tif((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\n\t\t{\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\n\t\t\treturn (-1);\n\t\t}\n\n\t\tif(view[0] === 0x00)\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\n\n\t\tif(this.blockLength <= 8)\n\t\t\tthis.valueDec = utilFromBase(view, 7);\n\t\telse\n\t\t{\n\t\t\tthis.isHexOnly = true;\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\n\t\t}\n\n\t\treturn (inputOffset + this.blockLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\t//region Initial variables\n\t\tlet retBuf;\n\t\tlet retView;\n\t\t//endregion\n\n\t\tif(this.isHexOnly)\n\t\t{\n\t\t\tif(sizeOnly === true)\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\n\n\t\t\tconst curView = new Uint8Array(this.valueHex);\n\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor(let i = 0; i < (this.blockLength - 1); i++)\n\t\t\t\tretView[i] = curView[i] | 0x80;\n\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\n\n\t\t\treturn retBuf;\n\t\t}\n\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\n\t\tif(encodedBuf.byteLength === 0)\n\t\t{\n\t\t\tthis.error = \"Error during encoding SID value\";\n\t\t\treturn (new ArrayBuffer(0));\n\t\t}\n\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\n\n\t\tif(sizeOnly === false)\n\t\t{\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\n\t\t\tretView = new Uint8Array(retBuf);\n\n\t\t\tfor(let i = 0; i < (encodedBuf.byteLength - 1); i++)\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\n\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create string representation of current SID block\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\n\t\tif(this.isHexOnly === true)\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\n\t\telse\n\t\t{\n\t\t\tif(this.isFirstSid)\n\t\t\t{\n\t\t\t\tlet sidValue = this.valueDec;\n\n\t\t\t\tif(this.valueDec <= 39)\n\t\t\t\t\tresult = \"0.\";\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(this.valueDec <= 79)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = \"1.\";\n\t\t\t\t\t\tsidValue -= 40;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = \"2.\";\n\t\t\t\t\t\tsidValue -= 80;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult += sidValue.toString();\n\t\t\t}\n\t\t\telse\n\t\t\t\tresult = this.valueDec.toString();\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.valueDec = this.valueDec;\n\t\tobject.isFirstSid = this.isFirstSid;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalObjectIdentifierValueBlock extends LocalValueBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalObjectIdentifierValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.fromString(getParametersValue(parameters, \"value\", \"\"));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tlet resultOffset = inputOffset;\n\n\t\twhile(inputLength > 0)\n\t\t{\n\t\t\tconst sidBlock = new LocalSidValueBlock();\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n\t\t\tif(resultOffset === (-1))\n\t\t\t{\n\t\t\t\tthis.blockLength = 0;\n\t\t\t\tthis.error = sidBlock.error;\n\t\t\t\treturn resultOffset;\n\t\t\t}\n\n\t\t\tif(this.value.length === 0)\n\t\t\t\tsidBlock.isFirstSid = true;\n\n\t\t\tthis.blockLength += sidBlock.blockLength;\n\t\t\tinputLength -= sidBlock.blockLength;\n\n\t\t\tthis.value.push(sidBlock);\n\t\t}\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\tlet retBuf = new ArrayBuffer(0);\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\n\t\t\tif(valueBuf.byteLength === 0)\n\t\t\t{\n\t\t\t\tthis.error = this.value[i].error;\n\t\t\t\treturn (new ArrayBuffer(0));\n\t\t\t}\n\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\n\t\t}\n\n\t\treturn retBuf;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Create \"LocalObjectIdentifierValueBlock\" class from string\n\t * @param {string} string Input string to convert from\n\t * @returns {boolean}\n\t */\n\tfromString(string)\n\t{\n\t\tthis.value = []; // Clear existing SID values\n\n\t\tlet pos1 = 0;\n\t\tlet pos2 = 0;\n\n\t\tlet sid = \"\";\n\n\t\tlet flag = false;\n\n\t\tdo\n\t\t{\n\t\t\tpos2 = string.indexOf(\".\", pos1);\n\t\t\tif(pos2 === (-1))\n\t\t\t\tsid = string.substr(pos1);\n\t\t\telse\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\n\n\t\t\tpos1 = pos2 + 1;\n\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tconst sidBlock = this.value[0];\n\n\t\t\t\tlet plus = 0;\n\n\t\t\t\tswitch(sidBlock.valueDec)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tplus = 40;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tplus = 80;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.value = []; // clear SID array\n\t\t\t\t\t\treturn false; // ???\n\t\t\t\t}\n\n\t\t\t\tconst parsedSID = parseInt(sid, 10);\n\t\t\t\tif(isNaN(parsedSID))\n\t\t\t\t\treturn true;\n\n\t\t\t\tsidBlock.valueDec = parsedSID + plus;\n\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst sidBlock = new LocalSidValueBlock();\n\t\t\t\tsidBlock.valueDec = parseInt(sid, 10);\n\t\t\t\tif(isNaN(sidBlock.valueDec))\n\t\t\t\t\treturn true;\n\n\t\t\t\tif(this.value.length === 0)\n\t\t\t\t{\n\t\t\t\t\tsidBlock.isFirstSid = true;\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\n\t\t\t\tthis.value.push(sidBlock);\n\t\t\t}\n\t\t} while(pos2 !== (-1));\n\n\t\treturn true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Converts \"LocalObjectIdentifierValueBlock\" class to string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tlet result = \"\";\n\t\tlet isHexOnly = false;\n\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t{\n\t\t\tisHexOnly = this.value[i].isHexOnly;\n\n\t\t\tlet sidStr = this.value[i].toString();\n\n\t\t\tif(i !== 0)\n\t\t\t\tresult = `${result}.`;\n\n\t\t\tif(isHexOnly)\n\t\t\t{\n\t\t\t\tsidStr = `{${sidStr}}`;\n\n\t\t\t\tif(this.value[i].isFirstSid)\n\t\t\t\t\tresult = `2.{${sidStr} - 80}`;\n\t\t\t\telse\n\t\t\t\t\tresult += sidStr;\n\t\t\t}\n\t\t\telse\n\t\t\t\tresult += sidStr;\n\t\t}\n\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ObjectIdentifierValueBlock\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.toString();\n\t\tobject.sidArray = [];\n\t\tfor(let i = 0; i < this.value.length; i++)\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class ObjectIdentifier extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"ObjectIdentifier\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalObjectIdentifierValueBlock);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"ObjectIdentifier\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of all string's classes\n//**************************************************************************************\nclass LocalUtf8StringValueBlock extends LocalHexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Constructor for \"LocalUtf8StringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\"; // String representation of decoded ArrayBuffer\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Utf8StringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class Utf8String extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Utf8String\" class\n\t * @param {Object} [parameters={}]\n\t * @property {ArrayBuffer} [valueHex]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalUtf8StringValueBlock);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 12; // Utf8String\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Utf8String\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\n\t\ttry\n\t\t{\n\t\t\t//noinspection JSDeprecatedSymbols\n\t\t\tthis.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\n\t\t}\n\t\tcatch(ex)\n\t\t{\n\t\t\tthis.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//noinspection JSDeprecatedSymbols\n\t\tconst str = unescape(encodeURIComponent(inputString));\n\t\tconst strLen = str.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLen; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalBaseBlock\n * @extends LocalHexBlock\n */\nclass LocalBmpStringValueBlock extends LocalHexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalBmpStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BmpStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class BmpString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"BmpString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalBmpStringValueBlock);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 30; // BmpString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"BmpString\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tconst copyBuffer = inputBuffer.slice(0);\n\t\tconst valueView = new Uint8Array(copyBuffer);\n\n\t\tfor(let i = 0; i < valueView.length; i += 2)\n\t\t{\n\t\t\tconst temp = valueView[i];\n\n\t\t\tvalueView[i] = valueView[i + 1];\n\t\t\tvalueView[i + 1] = temp;\n\t\t}\n\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLength = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLength; i++)\n\t\t{\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\n\t\t\tconst codeView = new Uint8Array(codeBuf);\n\t\t\tif(codeView.length > 2)\n\t\t\t\tcontinue;\n\n\t\t\tconst dif = 2 - codeView.length;\n\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\n\t\t\t\tvalueHexView[i * 2 + j + dif] = codeView[j];\n\t\t}\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalUniversalStringValueBlock extends LocalHexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalUniversalStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.isHexOnly = true;\n\t\tthis.value = \"\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UniversalStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nexport class UniversalString extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"UniversalString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalUniversalStringValueBlock);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.fromString(parameters.value);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 28; // UniversalString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UniversalString\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tconst copyBuffer = inputBuffer.slice(0);\n\t\tconst valueView = new Uint8Array(copyBuffer);\n\n\t\tfor(let i = 0; i < valueView.length; i += 4)\n\t\t{\n\t\t\tvalueView[i] = valueView[i + 3];\n\t\t\tvalueView[i + 1] = valueView[i + 2];\n\t\t\tvalueView[i + 2] = 0x00;\n\t\t\tvalueView[i + 3] = 0x00;\n\t\t}\n\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLength = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLength; i++)\n\t\t{\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\n\t\t\tconst codeView = new Uint8Array(codeBuf);\n\t\t\tif(codeView.length > 4)\n\t\t\t\tcontinue;\n\n\t\t\tconst dif = 4 - codeView.length;\n\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\n\t\t\t\tvalueHexView[i * 4 + j + dif] = codeView[j];\n\t\t}\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\nclass LocalSimpleStringValueBlock extends LocalHexBlock(LocalBaseBlock)\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSimpleStringValueBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.value = \"\";\n\t\tthis.isHexOnly = true;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SimpleStringValueBlock\";\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.value = this.value;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends BaseBlock\n */\nclass LocalSimpleStringBlock extends BaseBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"LocalSimpleStringBlock\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters, LocalSimpleStringValueBlock);\n\n\t\tif(\"value\" in parameters)\n\t\t\tthis.fromString(parameters.value);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"SIMPLESTRING\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\tconst strLen = inputString.length;\n\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\tfor(let i = 0; i < strLen; i++)\n\t\t\tview[i] = inputString.charCodeAt(i);\n\n\t\tthis.valueBlock.value = inputString;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class NumericString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"NumericString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 18; // NumericString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"NumericString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class PrintableString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"PrintableString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 19; // PrintableString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"PrintableString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class TeletexString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"TeletexString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 20; // TeletexString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TeletexString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class VideotexString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"VideotexString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 21; // VideotexString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"VideotexString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class IA5String extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"IA5String\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 22; // IA5String\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"IA5String\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class GraphicString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GraphicString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 25; // GraphicString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GraphicString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class VisibleString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"VisibleString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 26; // VisibleString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"VisibleString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class GeneralString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GeneralString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 27; // GeneralString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GeneralString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends LocalSimpleStringBlock\n */\nexport class CharacterString extends LocalSimpleStringBlock\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"CharacterString\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 29; // CharacterString\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"CharacterString\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of all date and time classes\n//**************************************************************************************\n/**\n * @extends VisibleString\n */\nexport class UTCTime extends VisibleString\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"UTCTime\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [value] String representatio of the date\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.year = 0;\n\t\tthis.month = 0;\n\t\tthis.day = 0;\n\t\tthis.hour = 0;\n\t\tthis.minute = 0;\n\t\tthis.second = 0;\n\n\t\t//region Create UTCTime from ASN.1 UTC string value\n\t\tif(\"value\" in parameters)\n\t\t{\n\t\t\tthis.fromString(parameters.value);\n\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\n\t\t}\n\t\t//endregion\n\t\t//region Create GeneralizedTime from JavaScript Date type\n\t\tif(\"valueDate\" in parameters)\n\t\t{\n\t\t\tthis.fromDate(parameters.valueDate);\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\n\t\t}\n\t\t//endregion\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 23; // UTCTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal string into ArrayBuffer\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBuffer()\n\t{\n\t\tconst str = this.toString();\n\n\t\tconst buffer = new ArrayBuffer(str.length);\n\t\tconst view = new Uint8Array(buffer);\n\n\t\tfor(let i = 0; i < str.length; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\treturn buffer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting \"Date\" object into ASN.1 internal string\n\t * @param {!Date} inputDate JavaScript \"Date\" object\n\t */\n\tfromDate(inputDate)\n\t{\n\t\tthis.year = inputDate.getUTCFullYear();\n\t\tthis.month = inputDate.getUTCMonth() + 1;\n\t\tthis.day = inputDate.getUTCDate();\n\t\tthis.hour = inputDate.getUTCHours();\n\t\tthis.minute = inputDate.getUTCMinutes();\n\t\tthis.second = inputDate.getUTCSeconds();\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Function converting ASN.1 internal string into \"Date\" object\n\t * @returns {Date}\n\t */\n\ttoDate()\n\t{\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//region Parse input string\n\t\tconst parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n\t\tconst parserArray = parser.exec(inputString);\n\t\tif(parserArray === null)\n\t\t{\n\t\t\tthis.error = \"Wrong input string for convertion\";\n\t\t\treturn;\n\t\t}\n\t\t//endregion\n\n\t\t//region Store parsed values\n\t\tconst year = parseInt(parserArray[1], 10);\n\t\tif(year >= 50)\n\t\t\tthis.year = 1900 + year;\n\t\telse\n\t\t\tthis.year = 2000 + year;\n\n\t\tthis.month = parseInt(parserArray[2], 10);\n\t\tthis.day = parseInt(parserArray[3], 10);\n\t\tthis.hour = parseInt(parserArray[4], 10);\n\t\tthis.minute = parseInt(parserArray[5], 10);\n\t\tthis.second = parseInt(parserArray[6], 10);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal class into JavaScript string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tconst outputArray = new Array(7);\n\n\t\toutputArray[0] = padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\n\t\toutputArray[1] = padNumber(this.month, 2);\n\t\toutputArray[2] = padNumber(this.day, 2);\n\t\toutputArray[3] = padNumber(this.hour, 2);\n\t\toutputArray[4] = padNumber(this.minute, 2);\n\t\toutputArray[5] = padNumber(this.second, 2);\n\t\toutputArray[6] = \"Z\";\n\n\t\treturn outputArray.join(\"\");\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"UTCTime\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.year = this.year;\n\t\tobject.month = this.month;\n\t\tobject.day = this.day;\n\t\tobject.hour = this.hour;\n\t\tobject.minute = this.minute;\n\t\tobject.second = this.second;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends VisibleString\n */\nexport class GeneralizedTime extends VisibleString\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"GeneralizedTime\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [value] String representatio of the date\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.year = 0;\n\t\tthis.month = 0;\n\t\tthis.day = 0;\n\t\tthis.hour = 0;\n\t\tthis.minute = 0;\n\t\tthis.second = 0;\n\t\tthis.millisecond = 0;\n\n\t\t//region Create UTCTime from ASN.1 UTC string value\n\t\tif(\"value\" in parameters)\n\t\t{\n\t\t\tthis.fromString(parameters.value);\n\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\n\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\n\t\t}\n\t\t//endregion\n\t\t//region Create GeneralizedTime from JavaScript Date type\n\t\tif(\"valueDate\" in parameters)\n\t\t{\n\t\t\tthis.fromDate(parameters.valueDate);\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\n\t\t}\n\t\t//endregion\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 24; // GeneralizedTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\n\t\tif(resultOffset === (-1))\n\t\t{\n\t\t\tthis.error = this.valueBlock.error;\n\t\t\treturn resultOffset;\n\t\t}\n\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\n\n\t\tif(this.idBlock.error.length === 0)\n\t\t\tthis.blockLength += this.idBlock.blockLength;\n\n\t\tif(this.lenBlock.error.length === 0)\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\n\n\t\tif(this.valueBlock.error.length === 0)\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\n\n\t\treturn resultOffset;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ArrayBuffer into ASN.1 internal string\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t */\n\tfromBuffer(inputBuffer)\n\t{\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal string into ArrayBuffer\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBuffer()\n\t{\n\t\tconst str = this.toString();\n\n\t\tconst buffer = new ArrayBuffer(str.length);\n\t\tconst view = new Uint8Array(buffer);\n\n\t\tfor(let i = 0; i < str.length; i++)\n\t\t\tview[i] = str.charCodeAt(i);\n\n\t\treturn buffer;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting \"Date\" object into ASN.1 internal string\n\t * @param {!Date} inputDate JavaScript \"Date\" object\n\t */\n\tfromDate(inputDate)\n\t{\n\t\tthis.year = inputDate.getUTCFullYear();\n\t\tthis.month = inputDate.getUTCMonth() + 1;\n\t\tthis.day = inputDate.getUTCDate();\n\t\tthis.hour = inputDate.getUTCHours();\n\t\tthis.minute = inputDate.getUTCMinutes();\n\t\tthis.second = inputDate.getUTCSeconds();\n\t\tthis.millisecond = inputDate.getUTCMilliseconds();\n\t}\n\t//**********************************************************************************\n\t//noinspection JSUnusedGlobalSymbols\n\t/**\n\t * Function converting ASN.1 internal string into \"Date\" object\n\t * @returns {Date}\n\t */\n\ttoDate()\n\t{\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting JavaScript string into ASN.1 internal class\n\t * @param {!string} inputString ASN.1 BER encoded array\n\t */\n\tfromString(inputString)\n\t{\n\t\t//region Initial variables\n\t\tlet isUTC = false;\n\n\t\tlet timeString = \"\";\n\t\tlet dateTimeString = \"\";\n\t\tlet fractionPart = 0;\n\n\t\tlet parser;\n\n\t\tlet hourDifference = 0;\n\t\tlet minuteDifference = 0;\n\t\t//endregion\n\n\t\t//region Convert as UTC time\n\t\tif(inputString[inputString.length - 1] === \"Z\")\n\t\t{\n\t\t\ttimeString = inputString.substr(0, inputString.length - 1);\n\n\t\t\tisUTC = true;\n\t\t}\n\t\t//endregion\n\t\t//region Convert as local time\n\t\telse\n\t\t{\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\tconst number = new Number(inputString[inputString.length - 1]);\n\n\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\ttimeString = inputString;\n\t\t}\n\t\t//endregion\n\n\t\t//region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\n\t\tif(isUTC)\n\t\t{\n\t\t\tif(timeString.indexOf(\"+\") !== (-1))\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\tif(timeString.indexOf(\"-\") !== (-1))\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\t\t}\n\t\t//endregion\n\t\t//region Get \"UTC time difference\" in case of local time\n\t\telse\n\t\t{\n\t\t\tlet multiplier = 1;\n\t\t\tlet differencePosition = timeString.indexOf(\"+\");\n\t\t\tlet differenceString = \"\";\n\n\t\t\tif(differencePosition === (-1))\n\t\t\t{\n\t\t\t\tdifferencePosition = timeString.indexOf(\"-\");\n\t\t\t\tmultiplier = (-1);\n\t\t\t}\n\n\t\t\tif(differencePosition !== (-1))\n\t\t\t{\n\t\t\t\tdifferenceString = timeString.substr(differencePosition + 1);\n\t\t\t\ttimeString = timeString.substr(0, differencePosition);\n\n\t\t\t\tif((differenceString.length !== 2) && (differenceString.length !== 4))\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\tlet number = new Number(differenceString.substr(0, 2));\n\n\t\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\t\thourDifference = multiplier * number;\n\n\t\t\t\tif(differenceString.length === 4)\n\t\t\t\t{\n\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\t\t\tnumber = new Number(differenceString.substr(2, 2));\n\n\t\t\t\t\tif(isNaN(number.valueOf()))\n\t\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\t\t\tminuteDifference = multiplier * number;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\t//region Get position of fraction point\n\t\tlet fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\n\t\tif(fractionPointPosition === (-1))\n\t\t\tfractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\n\t\t//endregion\n\n\t\t//region Get fraction part\n\t\tif(fractionPointPosition !== (-1))\n\t\t{\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\n\t\t\tconst fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\n\n\t\t\tif(isNaN(fractionPartCheck.valueOf()))\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\t\tfractionPart = fractionPartCheck.valueOf();\n\n\t\t\tdateTimeString = timeString.substr(0, fractionPointPosition);\n\t\t}\n\t\telse\n\t\t\tdateTimeString = timeString;\n\t\t//endregion\n\n\t\t//region Parse internal date\n\t\tswitch(true)\n\t\t{\n\t\t\tcase (dateTimeString.length === 8): // \"YYYYMMDD\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 10): // \"YYYYMMDDHH\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\n\t\t\t\t\tthis.minute = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 60 * (fractionResult - this.minute);\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 12): // \"YYYYMMDDHHMM\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\n\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (dateTimeString.length === 14): // \"YYYYMMDDHHMMSS\"\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n\n\t\t\t\tif(fractionPointPosition !== (-1))\n\t\t\t\t{\n\t\t\t\t\tconst fractionResult = 1000 * fractionPart;\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\t\t}\n\t\t//endregion\n\n\t\t//region Put parsed values at right places\n\t\tconst parserArray = parser.exec(dateTimeString);\n\t\tif(parserArray === null)\n\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\n\t\tfor(let j = 1; j < parserArray.length; j++)\n\t\t{\n\t\t\tswitch(j)\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.year = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.month = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.day = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hour = parseInt(parserArray[j], 10) + hourDifference;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.minute = parseInt(parserArray[j], 10) + minuteDifference;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.second = parseInt(parserArray[j], 10);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\n\t\t\t}\n\t\t}\n\t\t//endregion\n\n\t\t//region Get final date\n\t\tif(isUTC === false)\n\t\t{\n\t\t\tconst tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n\n\t\t\tthis.year = tempDate.getUTCFullYear();\n\t\t\tthis.month = tempDate.getUTCMonth();\n\t\t\tthis.day = tempDate.getUTCDay();\n\t\t\tthis.hour = tempDate.getUTCHours();\n\t\t\tthis.minute = tempDate.getUTCMinutes();\n\t\t\tthis.second = tempDate.getUTCSeconds();\n\t\t\tthis.millisecond = tempDate.getUTCMilliseconds();\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Function converting ASN.1 internal class into JavaScript string\n\t * @returns {string}\n\t */\n\ttoString()\n\t{\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(padNumber(this.year, 4));\n\t\toutputArray.push(padNumber(this.month, 2));\n\t\toutputArray.push(padNumber(this.day, 2));\n\t\toutputArray.push(padNumber(this.hour, 2));\n\t\toutputArray.push(padNumber(this.minute, 2));\n\t\toutputArray.push(padNumber(this.second, 2));\n\t\tif(this.millisecond !== 0)\n\t\t{\n\t\t\toutputArray.push(\".\");\n\t\t\toutputArray.push(padNumber(this.millisecond, 3));\n\t\t}\n\t\toutputArray.push(\"Z\");\n\n\t\treturn outputArray.join(\"\");\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"GeneralizedTime\";\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the block to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tlet object = {};\n\t\t\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\n\t\ttry\n\t\t{\n\t\t\tobject = super.toJSON();\n\t\t}\n\t\tcatch(ex){}\n\t\t//endregion\n\n\t\tobject.year = this.year;\n\t\tobject.month = this.month;\n\t\tobject.day = this.day;\n\t\tobject.hour = this.hour;\n\t\tobject.minute = this.minute;\n\t\tobject.second = this.second;\n\t\tobject.millisecond = this.millisecond;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class DATE extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"DATE\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 31; // DATE\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"DATE\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class TimeOfDay extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"TimeOfDay\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 32; // TimeOfDay\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TimeOfDay\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class DateTime extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"DateTime\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 33; // DateTime\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"DateTime\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class Duration extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Duration\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 34; // Duration\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"Duration\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * @extends Utf8String\n */\nexport class TIME extends Utf8String\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Time\" class\n\t * @param {Object} [parameters={}]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tsuper(parameters);\n\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\n\t\tthis.idBlock.tagNumber = 14; // Time\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\n\t * @returns {string}\n\t */\n\tstatic blockName()\n\t{\n\t\treturn \"TIME\";\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Choice\n//**************************************************************************************\nexport class Choice\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Choice\" class\n\t * @param {Object} [parameters={}]\n\t * @property {Array} [value] Array of ASN.1 types for make a choice from\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Any\n//**************************************************************************************\nexport class Any\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Any\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type Repeated\n//**************************************************************************************\nexport class Repeated\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Repeated\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\n\t\tthis.value = getParametersValue(parameters, \"value\", new Any());\n\t\tthis.local = getParametersValue(parameters, \"local\", false); // Could local or global array to store elements\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Declaration of special ASN.1 schema type RawData\n//**************************************************************************************\n/**\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\n */\nexport class RawData\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for \"Repeated\" class\n\t * @param {Object} [parameters={}]\n\t * @property {string} [name]\n\t * @property {boolean} [optional]\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\tthis.data = getParametersValue(parameters, \"data\", new ArrayBuffer(0));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Base function for converting block from BER encoded array of bytes\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n\t * @returns {number} Offset after least decoded byte\n\t */\n\tfromBER(inputBuffer, inputOffset, inputLength)\n\t{\n\t\tthis.data = inputBuffer.slice(inputOffset, inputLength);\n\t\treturn (inputOffset + inputLength);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\n\t * @returns {ArrayBuffer}\n\t */\n\ttoBER(sizeOnly = false)\n\t{\n\t\treturn this.data;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major ASN.1 BER decoding function\n//**************************************************************************************\n/**\n * Internal library function for decoding ASN.1 BER\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\n * @returns {{offset: number, result: Object}}\n */\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength)\n{\n\tconst incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\n\n\t//region Local function changing a type for ASN.1 classes\n\tfunction localChangeType(inputObject, newType)\n\t{\n\t\tif(inputObject instanceof newType)\n\t\t\treturn inputObject;\n\n\t\tconst newObject = new newType();\n\t\tnewObject.idBlock = inputObject.idBlock;\n\t\tnewObject.lenBlock = inputObject.lenBlock;\n\t\tnewObject.warnings = inputObject.warnings;\n\t\t//noinspection JSCheckFunctionSignatures\n\t\tnewObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\n\n\t\treturn newObject;\n\t}\n\t//endregion\n\n\t//region Create a basic ASN.1 type since we need to return errors and warnings from the function\n\tlet returnObject = new BaseBlock({}, Object);\n\t//endregion\n\n\t//region Basic check for parameters\n\tif(checkBufferParams(new LocalBaseBlock(), inputBuffer, inputOffset, inputLength) === false)\n\t{\n\t\treturnObject.error = \"Wrong input parameters\";\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Getting Uint8Array from ArrayBuffer\n\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\n\t//endregion\n\n\t//region Initial checks\n\tif(intBuffer.length === 0)\n\t{\n\t\tthis.error = \"Zero buffer length\";\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Decode indentifcation block of ASN.1 BER structure\n\tlet resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n\treturnObject.warnings.concat(returnObject.idBlock.warnings);\n\tif(resultOffset === (-1))\n\t{\n\t\treturnObject.error = returnObject.idBlock.error;\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\n\tinputOffset = resultOffset;\n\tinputLength -= returnObject.idBlock.blockLength;\n\t//endregion\n\n\t//region Decode length block of ASN.1 BER structure\n\tresultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n\treturnObject.warnings.concat(returnObject.lenBlock.warnings);\n\tif(resultOffset === (-1))\n\t{\n\t\treturnObject.error = returnObject.lenBlock.error;\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\n\tinputOffset = resultOffset;\n\tinputLength -= returnObject.lenBlock.blockLength;\n\t//endregion\n\n\t//region Check for usign indefinite length form in encoding for primitive types\n\tif((returnObject.idBlock.isConstructed === false) &&\n\t\t(returnObject.lenBlock.isIndefiniteForm === true))\n\t{\n\t\treturnObject.error = \"Indefinite length form used for primitive encoding form\";\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult: returnObject\n\t\t};\n\t}\n\t//endregion\n\n\t//region Switch ASN.1 block type\n\tlet newASN1Type = BaseBlock;\n\n\tswitch(returnObject.idBlock.tagClass)\n\t{\n\t\t//region UNIVERSAL\n\t\tcase 1:\n\t\t\t//region Check for reserved tag numbers\n\t\t\tif((returnObject.idBlock.tagNumber >= 37) &&\n\t\t\t\t(returnObject.idBlock.isHexOnly === false))\n\t\t\t{\n\t\t\t\treturnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n\t\t\t\treturn {\n\t\t\t\t\toffset: (-1),\n\t\t\t\t\tresult: returnObject\n\t\t\t\t};\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\tswitch(returnObject.idBlock.tagNumber)\n\t\t\t{\n\t\t\t\t//region EndOfContent type\n\t\t\t\tcase 0:\n\t\t\t\t\t//region Check for EndOfContent type\n\t\t\t\t\tif((returnObject.idBlock.isConstructed === true) &&\n\t\t\t\t\t\t(returnObject.lenBlock.length > 0))\n\t\t\t\t\t{\n\t\t\t\t\t\treturnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\toffset: (-1),\n\t\t\t\t\t\t\tresult: returnObject\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\n\t\t\t\t\tnewASN1Type = EndOfContent;\n\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Boolean type\n\t\t\t\tcase 1:\n\t\t\t\t\tnewASN1Type = Boolean;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Integer type\n\t\t\t\tcase 2:\n\t\t\t\t\tnewASN1Type = Integer;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region BitString type\n\t\t\t\tcase 3:\n\t\t\t\t\tnewASN1Type = BitString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region OctetString type\n\t\t\t\tcase 4:\n\t\t\t\t\tnewASN1Type = OctetString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Null type\n\t\t\t\tcase 5:\n\t\t\t\t\tnewASN1Type = Null;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region OBJECT IDENTIFIER type\n\t\t\t\tcase 6:\n\t\t\t\t\tnewASN1Type = ObjectIdentifier;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Enumerated type\n\t\t\t\tcase 10:\n\t\t\t\t\tnewASN1Type = Enumerated;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Utf8String type\n\t\t\t\tcase 12:\n\t\t\t\t\tnewASN1Type = Utf8String;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Time type\n\t\t\t\tcase 14:\n\t\t\t\t\tnewASN1Type = TIME;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region ASN.1 reserved type\n\t\t\t\tcase 15:\n\t\t\t\t\treturnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n\t\t\t\t\treturn {\n\t\t\t\t\t\toffset: (-1),\n\t\t\t\t\t\tresult: returnObject\n\t\t\t\t\t};\n\t\t\t\t//endregion\n\t\t\t\t//region Sequence type\n\t\t\t\tcase 16:\n\t\t\t\t\tnewASN1Type = Sequence;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Set type\n\t\t\t\tcase 17:\n\t\t\t\t\tnewASN1Type = Set;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region NumericString type\n\t\t\t\tcase 18:\n\t\t\t\t\tnewASN1Type = NumericString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region PrintableString type\n\t\t\t\tcase 19:\n\t\t\t\t\tnewASN1Type = PrintableString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region TeletexString type\n\t\t\t\tcase 20:\n\t\t\t\t\tnewASN1Type = TeletexString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region VideotexString type\n\t\t\t\tcase 21:\n\t\t\t\t\tnewASN1Type = VideotexString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region IA5String type\n\t\t\t\tcase 22:\n\t\t\t\t\tnewASN1Type = IA5String;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region UTCTime type\n\t\t\t\tcase 23:\n\t\t\t\t\tnewASN1Type = UTCTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GeneralizedTime type\n\t\t\t\tcase 24:\n\t\t\t\t\tnewASN1Type = GeneralizedTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GraphicString type\n\t\t\t\tcase 25:\n\t\t\t\t\tnewASN1Type = GraphicString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region VisibleString type\n\t\t\t\tcase 26:\n\t\t\t\t\tnewASN1Type = VisibleString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region GeneralString type\n\t\t\t\tcase 27:\n\t\t\t\t\tnewASN1Type = GeneralString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region UniversalString type\n\t\t\t\tcase 28:\n\t\t\t\t\tnewASN1Type = UniversalString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region CharacterString type\n\t\t\t\tcase 29:\n\t\t\t\t\tnewASN1Type = CharacterString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region BmpString type\n\t\t\t\tcase 30:\n\t\t\t\t\tnewASN1Type = BmpString;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region DATE type\n\t\t\t\tcase 31:\n\t\t\t\t\tnewASN1Type = DATE;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region TimeOfDay type\n\t\t\t\tcase 32:\n\t\t\t\t\tnewASN1Type = TimeOfDay;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Date-Time type\n\t\t\t\tcase 33:\n\t\t\t\t\tnewASN1Type = DateTime;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region Duration type\n\t\t\t\tcase 34:\n\t\t\t\t\tnewASN1Type = Duration;\n\t\t\t\t\tbreak;\n\t\t\t\t//endregion\n\t\t\t\t//region default\n\t\t\t\tdefault:\n\t\t\t\t\t{\n\t\t\t\t\t\tlet newObject;\n\n\t\t\t\t\t\tif(returnObject.idBlock.isConstructed === true)\n\t\t\t\t\t\t\tnewObject = new Constructed();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tnewObject = new Primitive();\n\n\t\t\t\t\t\tnewObject.idBlock = returnObject.idBlock;\n\t\t\t\t\t\tnewObject.lenBlock = returnObject.lenBlock;\n\t\t\t\t\t\tnewObject.warnings = returnObject.warnings;\n\n\t\t\t\t\t\treturnObject = newObject;\n\n\t\t\t\t\t\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, inputLength);\n\t\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t}\n\t\t\tbreak;\n\t\t//endregion\n\t\t//region All other tag classes\n\t\tcase 2: // APPLICATION\n\t\tcase 3: // CONTEXT-SPECIFIC\n\t\tcase 4: // PRIVATE\n\t\tdefault:\n\t\t\t{\n\t\t\t\tif(returnObject.idBlock.isConstructed === true)\n\t\t\t\t\tnewASN1Type = Constructed;\n\t\t\t\telse\n\t\t\t\t\tnewASN1Type = Primitive;\n\t\t\t}\n\t\t//endregion\n\t}\n\t//endregion\n\n\t//region Change type and perform BER decoding\n\treturnObject = localChangeType(returnObject, newASN1Type);\n\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, (returnObject.lenBlock.isIndefiniteForm === true) ? inputLength : returnObject.lenBlock.length);\n\t//endregion\n\n\t//region Coping incoming buffer for entire ASN.1 block\n\treturnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);\n\t//endregion\n\n\treturn {\n\t\toffset: resultOffset,\n\t\tresult: returnObject\n\t};\n}\n//**************************************************************************************\n/**\n * Major function for decoding ASN.1 BER array into internal library structuries\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\n */\nexport function fromBER(inputBuffer)\n{\n\tif(inputBuffer.byteLength === 0)\n\t{\n\t\tconst result = new BaseBlock({}, Object);\n\t\tresult.error = \"Input buffer has zero length\";\n\n\t\treturn {\n\t\t\toffset: (-1),\n\t\t\tresult\n\t\t};\n\t}\n\n\treturn LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major scheme verification function\n//**************************************************************************************\n/**\n * Compare of two ASN.1 object trees\n * @param {!Object} root Root of input ASN.1 object tree\n * @param {!Object} inputData Input ASN.1 object tree\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\n */\nexport function compareSchema(root, inputData, inputSchema)\n{\n\t//region Special case for Choice schema element type\n\tif(inputSchema instanceof Choice)\n\t{\n\t\tconst choiceResult = false;\n\n\t\tfor(let j = 0; j < inputSchema.value.length; j++)\n\t\t{\n\t\t\tconst result = compareSchema(root, inputData, inputSchema.value[j]);\n\t\t\tif(result.verified === true)\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: true,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif(choiceResult === false)\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: {\n\t\t\t\t\terror: \"Wrong values for Choice type\"\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t\t_result.name = inputSchema.name;\n\n\t\t\treturn _result;\n\t\t}\n\t}\n\t//endregion\n\n\t//region Special case for Any schema element type\n\tif(inputSchema instanceof Any)\n\t{\n\t\t//region Add named component of ASN.1 schema\n\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\troot[inputSchema.name] = inputData;\n\t\t//endregion\n\n\t\treturn {\n\t\t\tverified: true,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\n\t//region Initial check\n\tif((root instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong root object\" }\n\t\t};\n\t}\n\n\tif((inputData instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 data\" }\n\t\t};\n\t}\n\n\tif((inputSchema instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif((\"idBlock\" in inputSchema) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region Comparing idBlock properties in ASN.1 data and ASN.1 schema\n\t//region Encode and decode ASN.1 schema idBlock\n\t/// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\n\tif((\"fromBER\" in inputSchema.idBlock) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif((\"toBER\" in inputSchema.idBlock) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tconst encodedId = inputSchema.idBlock.toBER(false);\n\tif(encodedId.byteLength === 0)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Error encoding idBlock for ASN.1 schema\" }\n\t\t};\n\t}\n\n\tconst decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n\tif(decodedOffset === (-1))\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Error decoding idBlock for ASN.1 schema\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region tagClass\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagClass\") === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region tagNumber\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagNumber\") === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region isConstructed\n\tif(inputSchema.idBlock.hasOwnProperty(\"isConstructed\") === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region isHexOnly\n\tif((\"isHexOnly\" in inputSchema.idBlock) === false) // Since 'isHexOnly' is an inhirited property\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t};\n\t}\n\n\tif(inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region valueHex\n\tif(inputSchema.idBlock.isHexOnly === true)\n\t{\n\t\tif((\"valueHex\" in inputSchema.idBlock) === false) // Since 'valueHex' is an inhirited property\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\n\t\t\t};\n\t\t}\n\n\t\tconst schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\n\t\tconst asn1View = new Uint8Array(inputData.idBlock.valueHex);\n\n\t\tif(schemaView.length !== asn1View.length)\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\n\t\tfor(let i = 0; i < schemaView.length; i++)\n\t\t{\n\t\t\tif(schemaView[i] !== asn1View[1])\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: false,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\t//endregion\n\t//endregion\n\n\t//region Add named component of ASN.1 schema\n\tif(inputSchema.hasOwnProperty(\"name\"))\n\t{\n\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\tif(inputSchema.name !== \"\")\n\t\t\troot[inputSchema.name] = inputData;\n\t}\n\t//endregion\n\n\t//region Getting next ASN.1 block for comparition\n\tif(inputSchema.idBlock.isConstructed === true)\n\t{\n\t\tlet admission = 0;\n\t\tlet result = { verified: false };\n\n\t\tlet maxLength = inputSchema.valueBlock.value.length;\n\n\t\tif(maxLength > 0)\n\t\t{\n\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\n\t\t\t\tmaxLength = inputData.valueBlock.value.length;\n\t\t}\n\n\t\t//region Special case when constructive value has no elements\n\t\tif(maxLength === 0)\n\t\t{\n\t\t\treturn {\n\t\t\t\tverified: true,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\t\t//endregion\n\n\t\t//region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\n\t\tif((inputData.valueBlock.value.length === 0) &&\n\t\t\t(inputSchema.valueBlock.value.length !== 0))\n\t\t{\n\t\t\tlet _optional = true;\n\n\t\t\tfor(let i = 0; i < inputSchema.valueBlock.value.length; i++)\n\t\t\t\t_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n\n\t\t\tif(_optional === true)\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tverified: true,\n\t\t\t\t\tresult: root\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t//region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\troot.error = \"Inconsistent object length\";\n\n\t\t\treturn {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\t\t}\n\t\t//endregion\n\n\t\tfor(let i = 0; i < maxLength; i++)\n\t\t{\n\t\t\t//region Special case when there is an \"optional\" element of ASN.1 schema at the end\n\t\t\tif((i - admission) >= inputData.valueBlock.value.length)\n\t\t\t{\n\t\t\t\tif(inputSchema.valueBlock.value[i].optional === false)\n\t\t\t\t{\n\t\t\t\t\tconst _result = {\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t\tresult: root\n\t\t\t\t\t};\n\n\t\t\t\t\troot.error = \"Inconsistent length between ASN.1 data and schema\";\n\n\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//endregion\n\n\t\t\t\t\treturn _result;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\t\t\telse\n\t\t\t{\n\t\t\t\t//region Special case for Repeated type of ASN.1 schema element\n\t\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\n\t\t\t\t{\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n\t\t\t\t\tif(result.verified === false)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[0].optional === true)\n\t\t\t\t\t\t\tadmission++;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif((\"name\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tlet arrayRoot = {};\n\n\t\t\t\t\t\tif((\"local\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local === true))\n\t\t\t\t\t\t\tarrayRoot = inputData;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tarrayRoot = root;\n\n\t\t\t\t\t\tif(typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\n\t\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name] = [];\n\n\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//endregion\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n\t\t\t\t\tif(result.verified === false)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[i].optional === true)\n\t\t\t\t\t\t\tadmission++;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//region Delete early added name of block\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//endregion\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: root\n\t\t\t};\n\n\t\t\t//region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t{\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\treturn _result;\n\t\t}\n\n\t\treturn {\n\t\t\tverified: true,\n\t\t\tresult: root\n\t\t};\n\t}\n\t//endregion\n\t//region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\n\tif((\"primitiveSchema\" in inputSchema) &&\n\t\t(\"valueHex\" in inputData.valueBlock))\n\t{\n\t\t//region Decoding of raw ASN.1 data\n\t\tconst asn1 = fromBER(inputData.valueBlock.valueHex);\n\t\tif(asn1.offset === (-1))\n\t\t{\n\t\t\tconst _result = {\n\t\t\t\tverified: false,\n\t\t\t\tresult: asn1.result\n\t\t\t};\n\n\t\t\t//region Delete early added name of block\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\n\t\t\t{\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\n\t\t\t\tif(inputSchema.name !== \"\")\n\t\t\t\t{\n\t\t\t\t\tdelete root[inputSchema.name];\n\t\t\t\t\t_result.name = inputSchema.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//endregion\n\n\t\t\treturn _result;\n\t\t}\n\t\t//endregion\n\n\t\treturn compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n\t}\n\n\treturn {\n\t\tverified: true,\n\t\tresult: root\n\t};\n\t//endregion\n}\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n/**\n * ASN.1 schema verification for ArrayBuffer data\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\n */\nexport function verifySchema(inputBuffer, inputSchema)\n{\n\t//region Initial check\n\tif((inputSchema instanceof Object) === false)\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: { error: \"Wrong ASN.1 schema type\" }\n\t\t};\n\t}\n\t//endregion\n\n\t//region Decoding of raw ASN.1 data\n\tconst asn1 = fromBER(inputBuffer);\n\tif(asn1.offset === (-1))\n\t{\n\t\treturn {\n\t\t\tverified: false,\n\t\t\tresult: asn1.result\n\t\t};\n\t}\n\t//endregion\n\n\t//region Compare ASN.1 struct with input schema\n\treturn compareSchema(asn1.result, asn1.result, inputSchema);\n\t//endregion\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n//region Major function converting JSON to ASN.1 objects\n//**************************************************************************************\n//noinspection JSUnusedGlobalSymbols\n/**\n * Converting from JSON to ASN.1 objects\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\n */\nexport function fromJSON(json)\n{\n\t// TODO Implement\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************"],"file":"asn1.js"}